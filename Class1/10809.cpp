/*
 * 문제: 백준 10809번 - 알파벳 찾기
 * 링크: https://www.acmicpc.net/problem/10809
 * 분류: 문자열, 구현
 * 
 * 문제 설명:
 * - 알파벳 소문자로만 이루어진 단어 S가 주어진다.
 * - 각각의 알파벳(a~z)에 대해 S에 포함되어 있으면 처음 등장하는 위치(0부터 시작)를, 없으면 -1을 출력한다.
 * - 26개의 값을 공백으로 구분해 한 줄로 출력한다.
 * 
 * 입력:
 * - 첫째 줄에 단어 S(길이 ≤ 100)가 주어진다.
 * 
 * 출력:
 * - a~z까지 각 알파벳이 처음 등장하는 위치(없으면 -1)를 공백으로 구분해 출력한다.
 * 
 * 접근 방법:
 * - 길이 26의 배열을 -1로 초기화한다.
 * - 문자열을 앞에서부터 순회하며, 해당 문자가 처음 등장한 경우만 배열에 위치를 기록한다.
 * - 마지막에 배열을 순서대로 출력한다.
 * 
 * 시간복잡도: O(N) (N = 문자열 길이, 최대 100)
 * 공간복잡도: O(1)
 */

#include <iostream>
#include <string>
using namespace std;

int main() {
    string S;
    cin >> S; // 문자열 입력

    int alphabet[26]; // 알파벳 위치 저장 배열
    for (int i = 0; i < 26; i++) {
        alphabet[i] = -1; // -1로 초기화
    }

    // 문자열을 순회하며 처음 등장한 위치 기록
    for (int i = 0; i < S.length(); i++) {
        int idx = S[i] - 'a'; // a~z를 0~25로 변환
        if (alphabet[idx] == -1) {
            alphabet[idx] = i;
        }
    }

    // 결과 출력
    for (int i = 0; i < 26; i++) {
        cout << alphabet[i] << " ";
    }

    return 0;
}
